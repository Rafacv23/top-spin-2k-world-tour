generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tournament {
  id        String            @id @default(cuid())
  name      String
  location  String
  logo      String
  startDate DateTime
  endDate   DateTime
  players   Int?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  surface   TournamentSurface
  year      Int
  points    Int?
  matches   Match[]
}

model Player {
  id          String  @id @default(uuid()) @unique  
  name               String?            @unique
  country            String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt @default(now())
  email              String             @unique
  availability       AvailabilityDays[]
  discord            String             @unique
  experience         Boolean
  id2k               String             @unique
  platform           Platforms
  playerChoice       TypePlayer
  policy             Boolean
  matchesAsPlayerOne Match[]            @relation("PlayerOneMatches")
  matchesAsPlayerTwo Match[]            @relation("PlayerTwoMatches")
  matchesWon         Match[]
  rankings           Ranking[]
}

model Ranking {
  id          String  @id @default(uuid()) @unique  
  playerId    String
  year        Int
  points      Int      @default(0)
  tournaments Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  player      Player   @relation(fields: [playerId], references: [id])
}

model Match {
  id          String  @id @default(uuid()) @unique
  tournamentId String
  date         DateTime
  round        TournamentRound
  playerOneId  String
  playerTwoId  String
  winnerId     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  playerOne    Player     @relation("PlayerOneMatches", fields: [playerOneId], references: [id])
  playerTwo    Player     @relation("PlayerTwoMatches", fields: [playerTwoId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  winner       Player?    @relation(fields: [winnerId], references: [id], onDelete: Restrict)
  sets         Set[]
}

model Set {
  id             String  @id @default(uuid()) @unique
  matchId        String @unique
  number         SetNumber
  playerOneScore Int  @default(0)
  playerTwoScore Int  @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt @default(now())
  match          Match    @relation(fields: [matchId], references: [id])
}

model Admin {
  id          String  @id @default(uuid()) @unique  
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  role      Roles
  updatedAt DateTime @updatedAt
}

enum TournamentRound {
  FIRST_ROUND
  SECOND_ROUND
  THIRD_ROUND
  ROUND_OF_16
  QUARTER_FINALS
  SEMI_FINALS
  FINAL
}

enum Platforms {
  PC
  PS5
  Xbox
}

enum AvailabilityDays {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TypePlayer {
  REAL_PLAYER
  MYPLAYER
}

enum Roles {
  ADMIN
  TOURNAMENT_ORGANIZER
  REFEREE
}

enum TournamentSurface {
  GRASS
  CLAY
  HARD
  INDOOR
}

enum SetNumber {
  SET_ONE
  SET_TWO
  SET_THREE
  SET_FOUR
  SET_FIVE
}
